{"title":"Bisection Method","markdown":{"yaml":{"title":"Bisection Method","date":"2025-10-07","categories":["numerical","method","technique"],"nocite":"@Semirhan2021, @Hidayat2025, @Burden2011\n"},"headingText":"initialize interval","containsRefs":false,"markdown":"\n\nThose born after the 1990s are, in many ways, a fortunate generation. We live in an era where technological advancements. The convenience and accessibility of modern tools make problem solving faster than ever but they also come with a hidden cost.\n\nLiving in such easy times often makes us take things for granted. We tend to overlook the long and difficult journey that led to the technologies and knowledge we now enjoy. The shortcuts we rely on, whether in the form of powerful computational tools or education systems that emphasize on results over understanding the \"why\" behind them have made us less curious about the origins and motivations of the concepts we use.\n\nAs a result, many of us have become users rather than thinkers; we can apply existing methods, but we rarely question how or why they were developed. This mindset limits our ability to innovate more meaningful solutions that could once again push humanity forward.\n\nIn this post, let us take a step back and revisit one of the earliest and simplest numerical methods in history: the bisection method. By understanding its motivation and how it works, we can rekindle a bit of that appreciation for the thought and effort behind the tools we often take for granted.\n\nLet say we want to find the decimal numbers of $\\sqrt{2}$, for most of us, it is easy right? Take a scientific calculator, just push in the $\\sqrt{}$ and $2$ button in a calculator and then push in the conversion button to decimal number. The answer $1.4142135..$ should appear and we are done. Great! Well that is okay if you have a scientific calculator. But in case where you do not have one and need to convert $\\sqrt{2}$ into decimal number, what are you going to do? If you are trying to develop your own computer with limited memory, are you going to hardcode the decimal numbers into your computer? I can guarantee that your computer will perform really slow compare to your brain.\n\nSo in this situation, we need use some basic trick that will allow us to at least approximate the irrational number. In our case, let say that we have found a number $x$ that is the decimal number representation for $\\sqrt{2}$, we can then write the following expression which is true.\n\n$$x-\\sqrt{2}=0$$\n\nWe can turn expression above into a function because we still do not know what decimal number the $x$ should be. And this problem that we created just now is called the root-finding problem because it involves in finding a solution (root) of an equation of the form $f(x)=0$.\n\nThe bisection method was a technique developed as far back to at least 1700 B.C.E. It works by repeatedly cut a number interval, say $[a,b]$, into half (bisecting) and at each step, finding the subinterval which containing the root. If we think beyond mathematics, this concept is similar like cutting objects into smaller pieces right (think of chemistry)?\n\nThe following algorithm is an example of the steps done in bisection method. Note that this is not the exact method how computer was programmed to calculate $\\sqrt{2}$.\n\n```{r Bisection-example}\nfn <- function(x){\n  return(x - 2^(0.5))\n}\ni <- 1; half_list <- list()\n\na <- 1; b <- 2\n\n# begin Bisection method\nwhile(i <= 500){\n  # cut into half\n  halfpoint <- (a + b)/2\n  half_list <- append(half_list, halfpoint)\n  # check which subinterval have positive & negative sign\n  # then assign as new interval for next iteration\n  if (fn(a) < 0 & fn(halfpoint) > 0){\n    a <- a\n    b <- halfpoint\n  } else if(fn(halfpoint) < 0 & fn(b) > 0){\n    a <- halfpoint\n    b <- b\n  }\n  i <- i + 1\n}\n```\n\nThe following are the halfpoints which were generated after 10 iterations. As you can see, the movement of the halfpoints are closer to the $\\sqrt{2}$ (red vertical line) over the time.\n\n```{r}\n#| echo: false\n#| warning: false\n#| fig-width: 8\n#| fig-height: 6\n\nplot(c(1,half_list[1:10],2), rep(0,12), xlab=\"\", ylab=\"\", main = \"Half point of all subintervals\")\nabline(v = 2^0.5, col = \"red\", lwd=1.5)\nabline(v = 1, col = \"black\", lwd=1.5)\nabline(v = 2, col = \"black\", lwd=1.5)\n\n# Add x-axis with a specific color for labels and tick marks\naxis(1, col.axis = \"red\", col = \"black\")\n\n# Add box around the plot if desired\nbox()\n```\n\nBy the end of the 500th iteration, we can see that the interval $[a,b]$ has now become so close to the exact value of $\\sqrt{2}$.\n\n```{r result}\n#| echo: false\n#| warning: false\ncat(\"Interval at 500th iteration: [\",a,\",\", b, \"]\")\n```\n\nThe bisection method may appear simple, even primitive, when compared to the complex numerical solvers we have today. Yet, within its simplicity lies the foundation of many modern computational methods. It represents a time when mathematics was driven by curiosity, patience, and the desire to understand.\n\nThrough this humble method, we can appreciate how far human thought has come. Every algorithm we now use, no matter how sophisticated, stands on the shoulders of basic yet profound ideas like this. By revisiting the past, we remind ourselves that true progress is not merely about faster results, but about deeper understanding.\n\nAs learners in an age of convenience, we should strive to balance efficiency with comprehension and not only use the tools available to us but also to grasp the reasoning that shaped them. In doing so, we honor the spirit of discovery that brought us here and ensure that innovation continues to grow from understanding, not just automation.\n","srcMarkdownNoYaml":"\n\nThose born after the 1990s are, in many ways, a fortunate generation. We live in an era where technological advancements. The convenience and accessibility of modern tools make problem solving faster than ever but they also come with a hidden cost.\n\nLiving in such easy times often makes us take things for granted. We tend to overlook the long and difficult journey that led to the technologies and knowledge we now enjoy. The shortcuts we rely on, whether in the form of powerful computational tools or education systems that emphasize on results over understanding the \"why\" behind them have made us less curious about the origins and motivations of the concepts we use.\n\nAs a result, many of us have become users rather than thinkers; we can apply existing methods, but we rarely question how or why they were developed. This mindset limits our ability to innovate more meaningful solutions that could once again push humanity forward.\n\nIn this post, let us take a step back and revisit one of the earliest and simplest numerical methods in history: the bisection method. By understanding its motivation and how it works, we can rekindle a bit of that appreciation for the thought and effort behind the tools we often take for granted.\n\nLet say we want to find the decimal numbers of $\\sqrt{2}$, for most of us, it is easy right? Take a scientific calculator, just push in the $\\sqrt{}$ and $2$ button in a calculator and then push in the conversion button to decimal number. The answer $1.4142135..$ should appear and we are done. Great! Well that is okay if you have a scientific calculator. But in case where you do not have one and need to convert $\\sqrt{2}$ into decimal number, what are you going to do? If you are trying to develop your own computer with limited memory, are you going to hardcode the decimal numbers into your computer? I can guarantee that your computer will perform really slow compare to your brain.\n\nSo in this situation, we need use some basic trick that will allow us to at least approximate the irrational number. In our case, let say that we have found a number $x$ that is the decimal number representation for $\\sqrt{2}$, we can then write the following expression which is true.\n\n$$x-\\sqrt{2}=0$$\n\nWe can turn expression above into a function because we still do not know what decimal number the $x$ should be. And this problem that we created just now is called the root-finding problem because it involves in finding a solution (root) of an equation of the form $f(x)=0$.\n\nThe bisection method was a technique developed as far back to at least 1700 B.C.E. It works by repeatedly cut a number interval, say $[a,b]$, into half (bisecting) and at each step, finding the subinterval which containing the root. If we think beyond mathematics, this concept is similar like cutting objects into smaller pieces right (think of chemistry)?\n\nThe following algorithm is an example of the steps done in bisection method. Note that this is not the exact method how computer was programmed to calculate $\\sqrt{2}$.\n\n```{r Bisection-example}\nfn <- function(x){\n  return(x - 2^(0.5))\n}\ni <- 1; half_list <- list()\n\n# initialize interval\na <- 1; b <- 2\n\n# begin Bisection method\nwhile(i <= 500){\n  # cut into half\n  halfpoint <- (a + b)/2\n  half_list <- append(half_list, halfpoint)\n  # check which subinterval have positive & negative sign\n  # then assign as new interval for next iteration\n  if (fn(a) < 0 & fn(halfpoint) > 0){\n    a <- a\n    b <- halfpoint\n  } else if(fn(halfpoint) < 0 & fn(b) > 0){\n    a <- halfpoint\n    b <- b\n  }\n  i <- i + 1\n}\n```\n\nThe following are the halfpoints which were generated after 10 iterations. As you can see, the movement of the halfpoints are closer to the $\\sqrt{2}$ (red vertical line) over the time.\n\n```{r}\n#| echo: false\n#| warning: false\n#| fig-width: 8\n#| fig-height: 6\n\nplot(c(1,half_list[1:10],2), rep(0,12), xlab=\"\", ylab=\"\", main = \"Half point of all subintervals\")\nabline(v = 2^0.5, col = \"red\", lwd=1.5)\nabline(v = 1, col = \"black\", lwd=1.5)\nabline(v = 2, col = \"black\", lwd=1.5)\n\n# Add x-axis with a specific color for labels and tick marks\naxis(1, col.axis = \"red\", col = \"black\")\n\n# Add box around the plot if desired\nbox()\n```\n\nBy the end of the 500th iteration, we can see that the interval $[a,b]$ has now become so close to the exact value of $\\sqrt{2}$.\n\n```{r result}\n#| echo: false\n#| warning: false\ncat(\"Interval at 500th iteration: [\",a,\",\", b, \"]\")\n```\n\nThe bisection method may appear simple, even primitive, when compared to the complex numerical solvers we have today. Yet, within its simplicity lies the foundation of many modern computational methods. It represents a time when mathematics was driven by curiosity, patience, and the desire to understand.\n\nThrough this humble method, we can appreciate how far human thought has come. Every algorithm we now use, no matter how sophisticated, stands on the shoulders of basic yet profound ideas like this. By revisiting the past, we remind ourselves that true progress is not merely about faster results, but about deeper understanding.\n\nAs learners in an age of convenience, we should strive to balance efficiency with comprehension and not only use the tools available to us but also to grasp the reasoning that shaped them. In doing so, we honor the spirit of discovery that brought us here and ensure that innovation continues to grow from understanding, not just automation.\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","filters":["callouty-theorem"],"css":["../../styles.css"],"output-file":"post2.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.8.25","bibliography":["../../biblio.bib"],"editor":"visual","callouty-theorem":{"thm":{"override-title":false,"callout":{"type":"note","appearance":"minimal"}},"prp":{"override-title":false,"callout":{"type":"note","appearance":"minimal"}},"exr":{"override-title":false,"callout":{"type":"tip","appearance":"minimal"}},"proof":{"override-title":true,"callout":{"type":"note","appearance":"default","collapse":true,"icon":true}},"solution":{"override-title":true,"callout":{"type":"note","appearance":"default","collapse":true,"icon":true}},"remark":{"override-title":true,"callout":{"type":"tip","appearance":"default","collapse":false,"icon":true}},"cor":"default","def":{"override-title":true,"callout":"default"}},"theme":"lux","title-block-banner":true,"title":"Bisection Method","date":"2025-10-07","categories":["numerical","method","technique"],"nocite":"@Semirhan2021, @Hidayat2025, @Burden2011\n"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}